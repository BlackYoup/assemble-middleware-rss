/*
 * Assemble Plugin: RSS
 * https://github.com/assemble/rss
 *
 * Copyright (c) 2013 Jon Schlinkert, contributors.
 * Licensed under the MIT license.
 */

// Node.js
var path = require('path'),
    url = require('url');

// node_modules
var chalk = require('chalk'),
    moment = require('moment'),
    RSS = require('rss');


/**
 * @param  {Object}   config
 * @param  {Function} callback
 * @return {String}   The permalink string
 */
module.exports = function(config, callback) {

  'use strict';

  var options = config.context,
      grunt = config.grunt,
      pkg = grunt.file.readJSON(path.join(process.cwd(), 'package.json')),
      feed = options.feed || {};
  
  var pages = options.pages,
      page = options.page;
  
  var async = grunt.util.async,
      _ = grunt.util._;

  var Utils = require('./lib/utils');



  /**
   * Moment.js default language
   */
  moment.lang(feed.language || 'en');


  // Skip over the plugin if it isn't defined in the options.
  if(!_.isUndefined(feed)) {

    var failFeed = function(prop) {
      if(feed.logging) {
        return grunt.fail.fatal(('"feed: ' + prop + '"').yellow + ' not defined for RSS feed.'.bold);
      } else {
        return;
      }
    }



    /**
     * Generate the main RSS feed.
     */
    var feed = new RSS({
      generator     : 'Generated by Assemble, JavaScript static site generator for Node.js, Grunt.js, Yeoman. visit http://assemble.io to learn more.',
      lastBuildDate : moment().format("dddd, MMMM Do YYYY"),
      title         : feed.title          || pkg.name,
      description   : feed.description    || pkg.description,
      pubdate       : feed.pubdate,
      site_url      : feed.siteurl        || pkg.homepage,
      feed_url      : feed.feedurl        || url.resolve(pkg.homepage, feed.dest || 'feed.xml'),
      image_url     : feed.imageurl,
      author        : feed.author         || pkg.author.name || failFeed('author'),
      managingEditor: feed.managingEditor,
      webMaster     : feed.webMaster,
      categories    : feed.categories,
      docs          : feed.docs,
      copyright     : feed.copyright      || 'Copyright (c) ' + moment().format("YYYY") + ' ' + pkg.author.name || '',
      language      : feed.language       || 'en',
      ttl           : feed.ttl            || '60',
      geoRSS        : feed.geoRSS         || false
    });



    /**
     * Generate the feeds for each page.
     */
    async.forEachSeries(pages, function(file, next) {

      var failItem = function(prop) {
        if(feed.logging) {
          return grunt.fail.fatal(('"rss: ' + prop + '"').yellow + ' not defined for ' + ('"' + file.filename + '"').bold);
        } else {
          return;
        }
      }

      if (page.src !== file.src) {
        next();
        return;
      }
    
      // Define defaults for items.
      feed.items = feed.items || {};
      file.feed  = file.feed || {};

      feed.item({
        date        : feed.items.date        || file.feed.date        || file.feed.pubdate || failItem('date'), 
        author      : feed.items.author      || file.feed.author      || feed.author  || failItem('author'),
        title       : feed.items.title       || file.feed.title       || failItem('title'),
        description : feed.items.description || file.feed.description,

        url         : feed.items.url         || file.feed.url         || url.resolve(pkg.homepage, file.dest), 
        guid        : feed.items.guid        || file.feed.guid        || file.feed.url, 
        categories  : feed.items.categories  || file.feed.categories,
        lat         : feed.items.lat         || file.feed.lat, 
        long        : feed.items.long        || file.feed.long, 
        // enclosure: {
        //   url    : '...',
        //   file   : 'path-to-file'
        // } // optional enclosure
      });


      // cache the xml 
      var xml = feed.xml();

      // optionally format XML
      if(options.feed.format === true) {
        xml = Utils.formatXML(xml);
      }


      // For each page that has a feed, write the RSS xml file to the same 
      // dest path defined for the page, unless a custom path is defined.
      var dest = path.join(path.dirname(file.dest), feed.dest || 'feed.xml');


      // Write the feed
      grunt.file.write(dest, xml);
      grunt.verbose.success('>> RSS feed generated in '.green + dest.replace(/\\/g, '/'));
      next();
    }, function (err) {
      callback();
    });
  }
};
