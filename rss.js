var path = require('path');
var url = require('url');
var fs = require('fs');
var chalk = require('chalk');
var moment = require('moment');
var async = require('async');
var rss = require('rss');
var _ = require('lodash');
var utils = require('./lib/utils');

module.exports = function(config, callback) {

  'use strict';

  var options = config.context;
  var grunt = config.grunt;
  var pkg = grunt.file.readJSON(path.join(process.cwd(), 'package.json'));
  var feed = options.feed || {};
  
  var pages = options.pages; // Define an array all of page data.
  var page = options.page; // Define a single page's data object.

  // Skip over the plugin if it isn't defined in the options.
  if (!_.isUndefined(feed)) {

    /**
     * @function fail
     * @param {string} 'property' - The undefined property.
     * @desc Stops Grunt with a fatal failure.
     */
    var fail = function (property) {
      if (feed.logging) {
        return grunt.fail.fatal(
          ('assemble-middleware-rss ' + property).yellow + 
          ' is not defined in gruntfile.js.'.bold
        );
      } else return;
    };
    
    /**
     * @object defaults
     * @desc Set default values for the RSS feed data.
     */
    var defaults = {
      title: pkg.name,
      author: pkg.author.name,
      description: pkg.description,
      copyright: 'Copyright ' + moment().format("YYYY") + ' ' + pkg.author.name,
      generator: 'Generated by Assemble.js.',
      lastBuildDate: moment().format("dddd, MMMM Do YYYY"),
      pubdate: 0, // @TODO use moment.js to to return formated string
      siteurl: pkg.homepage,
      feedurl: url.resolve(pkg.homepage, feed.dest || 'feed.xml'),
      language: 'en',
      ttl: '60',
      geoRSS: false,
    };
       
    moment.lang(feed.language || defaults.language);  // Moment.js default language
    
    /**
     * @function feed
     * @desc Generate the feed using the rss module. 
     *       The idea here is to check is a property is defined in 
     *       the plugin configuration. If it is not, pull it from the
     *       defaults object (which is defined above). In some cases where a 
     *       a required property is not specified in the config and the
     *       default will not solve that issue, the `fail()` function will
     *       be called, thus stoping the task.
     */
    var feed = new rss({
      generator: feed.generator || defaults.generator,
      lastBuildDate: defaults.lastBuildDate,
      title: feed.title || defaults.title || fail('title'),
      description: feed.description || defaults.description,
      pubdate: feed.pubdate || defaults.pubdate,
      site_url: feed.siteurl || defaults.siteurl,
      feed_url: feed.feedurl || defaults.feedurl,
      image_url: feed.imageurl,
      author: feed.author || defaults.author || fail('author'),
      managingEditor: feed.managingEditor,
      webMaster: feed.webMaster,
      categories: feed.categories,
      docs: feed.docs,
      copyright: feed.copyright || defaults.copyright,
      language: feed.language || defaults.language,
      ttl: feed.ttl || defaults.ttl,
      geoRSS: feed.geoRSS || defaults.geoRSS
    });
    
    /**
     * @function addItem
     * @param {object} 'itemData'
     * @desc Add an item to the RSS feed.
     */
    var addItem = function (itemData) {
      feed.item(itemData);
    };
       
    async.eachSeries(pages, function (file, next) {
      
      var page = file.data;
          
      /**
       * @object defaults.item
       * @desc Sets default values for each item in the RSS feed.
       */
      defaults.item = {
        title: page.title || fail('title'),
        author: defaults.author || page.author || fail('author'),
        description: page.description,
        url: page.url || url.resolve(pkg.homepage, file.dest), 
        guid: page.guid || page.url, 
        categories: page.categories,
        lat: page.lat, 
        long: page.long
      };
      
      addItem(defaults.item);
      
      next();
    }, function (err) {
      callback();
    });
        
    var output = feed.xml(); // cache the XML output to a variable
    if (options.feed.format === true) output = utils.format(output); // format XML if true
  
    /** 
     * I could use `grunt.file.write()` but I am trying to future 
     * proof this middleware for versions of assemble that don't depend on 
     * grunt.
     */
    fs.writeFileSync(path.join(__dirname,'feed.xml'), output);
    //console.log('RSS feed generated in ' /*+ dest.replace(/\\/g, '/')*/ + ' OK'.green);    
        
  };
};
